////////////////////////////////////////
@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,0.25);
        aa
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}


////////////////////
// LOGO

.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

////////////////////
// SEARCH
.search {
    display: flex;
    flex: 0 0 40%;
    
    display: flex; 
    justify-content: center;
    align-items: center;

    @media only screen and (max-width: $bp-smallest) {
        order: 1;
        flex: 0 0 100%;
        background-color: var(--color-grey-light-2);
    }

    &__input {
        border: none;
        width: 90%;
        padding: .8rem 2rem;
        border-radius: 2rem;
        font-family: inherit;
        color: inherit;
        background-color: var(--color-grey-light-2);
        transition: all .4s;
        margin-right: -3.25rem;
        
        @media only screen and (max-width: $bp-smallest) {
            border-radius: 0;
        
        }

        &::placeholder {
            font-size: 1.4rem;
        }

        &:focus {
            outline: none;
            width: 100%;
            background-color: var(--color-grey-light-3);
        }
    }

    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {
        border: none;
        background-color: var(--color-grey-light-2);

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px);
        }
    }

    &__icon {
        height: 2rem;
        width: 2rem;
        fill: var(--color-grey-dark-3);
    }
}

////////////////////
// USER NAVIGATION
.user-nav {
    display: flex;
    justify-content: center;
    align-items: center;
    align-self: stretch;


    // background-color: red;
   
    & > * {
        padding: 0 2rem;
        cursor: pointer;
        height: 100%;
        display: flex;
        align-items: center;
    }

    & > *:hover {
        background-color: var(--color-grey-light-3);
    }

    &__icon-box {
        position: relative;
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }

    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        color: #fff;
        border-radius: 50%;
        background-color: var(--color-primary);
        position: absolute;
        top: 1.5rem;
        right: 1rem;
        
        display: flex;
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
        margin-right: 1rem;
    }

}

////////////////////
// SIDE-NAVIGATION
.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;
    
    @media only screen and (max-width: $bp-medium) {

        // .side-nav is the class of the unordered list
        // so by setting the display to flex, the list items will sit side-by-side on the same line
        display: flex;

        // there is remaining margin-top inherited from desktop view, and we want to remove this so we can set it to 0
        margin-top: 0;
    }

    &__item {
        position: relative;

        &:not(:last-child) {
            margin-bottom: .5rem;

            @media only screen and (max-width: $bp-medium) {

                // every element aside from the last element, has a margin-bottom
                // so we can set it to 0 to remove the margin-bottom
                margin-bottom: 0;
            }
        }

        &:first-child {
            background-color: var(--color-primary);
        }

        @media only screen and (max-width: $bp-medium) {

            // flex: 0 0 25% is set to every child element of the side-navigation such that each flex item is going to 
            // grow to be 25% of the container relative to the number of elements currently in the container
            // and so given that we have 4 items, 25 * 4 = 100% and so the flex items will arrange themselves with equal width and no gaps
            // to match the available horizontal-space in the container

            // the list items act like there own container upon inspection of the HTML code
            // each <li> item contains a variety of items, so we should set this container to flex to center these elements.
            // and we cannot just rely on the parent (.side-nav) to be flex

            // flex: 1 -- the size of all of the other elements will have the same width as their content.
            
            // Alternative Methods:
            // -- flex-grow: 1 such that each child is set to an equal size within the container.
            // -- flex: 0 0 25% such that each flex-item is 25% of the total-width of the container.
            
            flex: 1; // note: flex 1 only works if the parent container is set to display: flex.
            display: flex;
            justify-content: center;
            padding: .5rem; 
        }
    }


    // the animation is basically scaling of the container in the X direction and Y direction

    // 1. we need a ::before pseudoelement at the start of each item (make sure to define content: "" otherwise won't work)
    //     such that scaleY = 0 (ie. item appears to be gone, but is just extremely small)
    // 2. apply :hover to the pseudoelement, such that when hovered the item is scaled in the Y direction to 100% and so is the width
    // 3. we need to apply a transition property to the ::before pseudoelement otherwise the width and transform property will
    //      operate simultaneously. we need to add a delay for one of the properties, such that since transform is the first property
    //      that is going first, we add the delay to the width property.
    //    so since the transition period for transform is .2s, we must add a .2s delay for the width. 


    &__item::before {
        content: "";
        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0);

        // using the transition property we can change the transition period for different/individual properties 
        // width .4s .2s such that the .2s is the delay until the width transition begins
        // by adding another "time" period following a properties transition, we can delay it by x seconds
        // .2s is chosen as the transform takes .2s so by delaying it by .2s, it appears as if the animations r in order with
        // transform happening first then width smoothly 

        // can combine the transition-timing-function into just transition written as: 
        //      transition: transform .2s, width .4s cubic-bezier(1,0,0,1) .2s;
        transition: transform .2s, width .4s .2s;
        transition-timing-function: cubic-bezier(1,0,0,1);
        
    }

    &__item:hover::before {
        transform: scaleY(1);
        width: 100%;
        
    }

    &__link:link,
    &__link:visited {
        z-index: 100;
        position: relative;
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;

        display: flex;
        align-items: center;

        @media only screen and (max-width: $bp-small) {
            flex-direction: column;
            padding: 1.5rem .5rem;
        }
    }

    &__icon {
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;

        // currentColor - returns the colour of the parent element
        fill: currentColor;

        @media only screen and (max-width: $bp-small) {
            margin-right: 0;
            margin-bottom: .7rem;
            width: 1.5rem;
            height: 1.5rem;
        }
    }
}

////////////////////
// LEGAL-TEXT
.legal {
    font-size: 1.2rem;
    text-align: center;
    padding: 2.5rem;
    color: var(--color-grey-light-4);

    @media only screen and (max-width: $bp-medium) {

        // legal text is not shown at 1100px (or 56.25rem) hence by setting the display to none; the item is removed from the page such that no space will be allocated for the element on the page.
        // so why not use visibility: hidden? is there a difference between display: none and visibility: hidden?

        // display: none -- removes the item in question from the page entirely and no space will be allocated for the element (ie. removed from page flow)
        // visibility: hidden -- content is hidden, but space is allocated (ie. still affects the page flow)

        // w/ visibility: hidden -- space is being allocated; can be interacted using the DOM
        // w/ display: none -- space is not being allocated; cannot be interacted with using the DOM

        display: none;
    }
}

////////////////////
// GALLERY
.gallery {

    // to get images inline side-by-side, we can use flexbox 
    display: flex;

    &__item {
        
    }

    &__image {
        width: 100%; // need to define a width/height in percentages so that the image stays fluid
        display: block; // deals with the small space underneath an image when left as an inline element
    }
}


// HOTEL-OVERVIEW
.overview {
    display: flex;
    align-items: center;

    border-bottom: var(--line);

    &__heading {
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem;
        font-size: 2.25rem;

        @media only screen and (max-width: $bp-small) {
            font-size: 1.8rem;
            padding: 1.25rem 2rem;
        }
    }

    &__stars {
        
        // using flex: 1 also works but the problem is that the stars container will occupy all of the remaining whitespace
        // compared to margin-right: auto which only provides a margin that is as big as the remaining whitespace    
        margin-right: auto;

        display: flex;
    }

    // can group cuz both svgs; both svgs are going to be styled same colour
    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__location {
        display: flex;
        justify-content: center;
        align-items: center;
        
        font-size: 1.2rem;
    }

    &__icon-location {
        margin-right: .5rem;
    }

    &__rating {
        background-color: var(--color-primary);
        margin-left: 3rem;
        color: #fff;
        align-self: stretch;
        padding: 0 2.25rem;
        display: flex;

        // w/o flex-direction, the items are aligned in a row inline which is not what we want
        // by setting flex direction to column, we can position the desirable format using justify-content and align-items correctly.
        flex-direction: column;
        justify-content: center;
        align-items: center;

        &-average {
            font-size: 2.25rem;
            font-weight: 300;
            margin-bottom: -3px;

            @media only screen and (max-width: $bp-small) {
                font-size: 1.8rem;
            }
        }

        &-count {
            font-size: .8rem;
            text-transform: uppercase;

            @media only screen and (max-width: $bp-small) {
                font-size: .5rem;
            }
        }
    }

}


.btn-inline {
    border: none;
    outline: none;

    // makes button more modular/reusable.
    // we don't need to change button's background color depending on the background of where its placed.
    background-color: transparent;
    color: var(--color-primary);

    // button can be more modular and reusable.
    // by setting the font-size to inherit, the font-size of the button will depend on the font-size of the parent container that
    // it will be placed in. 
    // so the font size will adapt to the different parent containers its placed in. 
    font-size: inherit;

    // uses the same colour as the parent element
    border-bottom: 1px solid currentColor;
    padding-bottom: 3px;
    display: inline-block;
    cursor: pointer;
    transition: all .2s;

    span {
        margin-left: 3px;
        transition: all .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1);

        span {
            margin-left: 1rem;
        }
    }

    &:focus {
        outline: none;
        color: var(--color-grey-dark-1);
        animation: pulsate 1s infinite; 
    }
}

////////////////////
// PARAGRAPH
.paragraph:not(:last-of-type) {
    margin-bottom: 2rem;
}


////////////////////
// LIST
.list {
    margin: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);
    padding: 3rem 0;
    list-style: none;
    // list-style-image: url("../img/chevron-thin-right.svg");
    // fill: var(--color-primary);
    display: flex;

    // flex-wrap sets whether flex items should occupy one line or can be flowed into multiple lines.
    // if wrapped it also defines the cross-axis which determines the direction new lines are stacked in.

    // without this property, our elements will sit inline overflowing the screen which is not what we want.
    // by wrapping our elements will wrap to multiple lines as defined, by the flex property 
    // so by doing flex: 0 0 50%; it sets all list items to have a width 50% of the parent which is 
    flex-wrap: wrap;

    &__item {
        flex: 0 0 50%;
        margin-bottom: .7rem;
    }

    &__item::before {
        content: ""; // with pseudoelements we need to define the content property, otherwise it doesn't work.
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;
        
        // using masks - hides an element either partially/fully, clipping the image at specific points.
        background-color: var(--color-primary);
        mask-image: url(../img/chevron-thin-right.svg);

        // icon is larger than the height/width = 1rem, so only part of the image is shown.
        // by adding mask-size: cover, it resizes the mask to fit/cover the entire container even if it has to stretch the image or cut a little bit off the edges.
        mask-size: cover;

        // we can't change background-color using background-image: url(...)
    }
}

////////////////////
// RECOMMEND
.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-2);

    display: flex;
    align-items: center;
    
    &__count {
        margin-right: auto;
    }

    &__friends {
        
        // the photos are constantly moving to a new line, causing us to change the margin with each new media query 
        // an easier and more conveienet solution is to set the parent container to flex, so that all the images sit side-by-side inline no matter the window size.
        display: flex;
    }

    &__photo {
        width: 4rem;
        height: 4rem;

        // the border of 3px goes into the image and so is not calculated in the final dimensions
        // to include the border to be considered, we need to add the box-sizing property and setting it back to default which is content-box
        box-sizing: content-box;
        border-radius: 50%;
        border: 3px solid #fff;

        &:not(:last-child) {
            margin-right:-2rem;
        }
    }
}


////////////////////
// USER-REVIEWS
.review {
    background-color: white;
    margin-bottom: 3.5rem;
    padding: 3rem;
    font-size: 1.4rem;
    box-shadow: var(--shadow-light);
    position: relative;
    overflow: hidden;

    @media only screen and (max-width: $bp-medium) {
        // padding: 2rem;
        margin-bottom: 3rem;
    }

    &__text {
        margin-bottom: 2rem;

        // z-index doesnt work without defining a position property (position value has to be anything other than static)
        position: relative;
        z-index: 10;
    }

    &__user {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    &__photo {
        border-radius: 50%;
        height: 4.5rem;
        width: 4.5rem;
        margin-right: 1.5rem;
    }

    &__user-box {
        margin-right: auto;
    }

    &__user-name {
        text-transform: uppercase;
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: .4px;
    }

    &__user-date {
        font-size: 1rem;
        color: var(--color-grey-dark-3);
    }

    &__rating {
        font-size: 2.2rem;
        font-weight: 300;
        color: var(--color-primary);
    }

    &::before {
        // adding quotation mark html entity
        // for html insertion - &quot;
        // and for css insertion, google "html entities css-tricks"
        content: "\201C";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        font-size: 20rem;
        z-index: 1;
        color: var(--color-grey-light-2);
        line-height: 1;
        
        // currently the content quotation marks look like "
        // we can change this by changing the font-family to sans-serif which gives us the quotations marks we want.
        font-family: sans-serif;
    }
}

//////////////////
// CALL-TO-ACTION 
.cta {
    padding: 3.5rem 0;
    text-align: center;

    &__book-now {
        text-transform: uppercase;
        margin-bottom: 2rem;
        font-size: 2rem;
        font-weight: 300;
    }
}

.btn {
    // within the button component, on hover we want to reveal different text that is currently being shown
    // we need two span elements, one for the visible text and one for the invisible that when hovered will transition into the button
    //      - shift the invisible text (top: -100%) upwards; the button has overflow set to hidden so it doesnt show up at all
    //      - on hover top: 0 and we also need to shift the visible text (transform: translateY(100%))
    //      - finally add a transition property for both visible and invisible span elements, otherwise it appears that only the invisible tag is coming in and the visible tag disapears.

    font-size: 1.5rem;
    border: none;
    font-weight: 300;
    text-transform: uppercase;
    border-radius: 100px;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: #fff;
    position: relative;
    overflow: hidden;
    cursor: pointer;

    & > * {
        // need to define display as inline-block for the padding to work.
        display: inline-block;
        width: 100%;
        height: 100%;
        transition: all .2s;
    }

    &__visible {
        padding: 2.5rem 7.5rem;
    }

    &__invisible {
        padding: 2.5rem 0;
        position: absolute;
        left: 0;

        // moves the element up the same number of units of that element, so 5px element means it will move up 5px 
        top: -100%;
        transition: all .2s;
    }

    &:hover &__visible {
        transform: translateY(100%);
    }

    &:hover &__invisible {
        top: 0;
    }
}

















